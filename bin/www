#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('myproject:server');
const http = require('http');
const https = require('https');
const fs = require('fs');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// SSL setup
let credentials = null;
try {
  const privateKey = fs.readFileSync('./sslcert/key.pem', 'utf8');
  const certificate = fs.readFileSync('./sslcert/cert.pem', 'utf8');
  credentials = { key: privateKey, cert: certificate };
} catch (err) {
  console.warn('SSL certificates are missing. HTTPS will not be available.');
}

// Create HTTP server
const httpServer = http.createServer(app);
httpServer.listen(port);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

// Create HTTPS server if SSL is configured
if (credentials) {
  const httpsPort = process.env.HTTPS_PORT || 443;
  const httpsServer = https.createServer(credentials, app);
  httpsServer.listen(httpsPort, () => {
    console.log(`HTTPS server running on port ${httpsPort}`);
  });
}

// Utility functions
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // port number
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = httpServer.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
  console.log(`HTTP server running on port ${port}`);
}
